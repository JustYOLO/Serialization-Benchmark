/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "struct_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




TStruct::~TStruct() noexcept {
}


void TStruct::__set_uztrathh(const std::string& val) {
  this->uztrathh = val;
}

void TStruct::__set_xlcdrebd(const std::string& val) {
  this->xlcdrebd = val;
}

void TStruct::__set_svblwglq(const std::string& val) {
  this->svblwglq = val;
}

void TStruct::__set_gkesoazh(const std::string& val) {
  this->gkesoazh = val;
}

void TStruct::__set_gdnajler(const std::string& val) {
  this->gdnajler = val;
}

void TStruct::__set_yzjgzcpl(const std::string& val) {
  this->yzjgzcpl = val;
}

void TStruct::__set_ucfkmhfi(const std::string& val) {
  this->ucfkmhfi = val;
}

void TStruct::__set_hcfkimtf(const std::string& val) {
  this->hcfkimtf = val;
}
std::ostream& operator<<(std::ostream& out, const TStruct& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uztrathh);
          this->__isset.uztrathh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->xlcdrebd);
          this->__isset.xlcdrebd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->svblwglq);
          this->__isset.svblwglq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gkesoazh);
          this->__isset.gkesoazh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gdnajler);
          this->__isset.gdnajler = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->yzjgzcpl);
          this->__isset.yzjgzcpl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ucfkmhfi);
          this->__isset.ucfkmhfi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hcfkimtf);
          this->__isset.hcfkimtf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TStruct");

  xfer += oprot->writeFieldBegin("uztrathh", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uztrathh);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xlcdrebd", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->xlcdrebd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svblwglq", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->svblwglq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gkesoazh", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->gkesoazh);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gdnajler", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->gdnajler);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yzjgzcpl", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->yzjgzcpl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ucfkmhfi", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->ucfkmhfi);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hcfkimtf", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->hcfkimtf);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TStruct &a, TStruct &b) {
  using ::std::swap;
  swap(a.uztrathh, b.uztrathh);
  swap(a.xlcdrebd, b.xlcdrebd);
  swap(a.svblwglq, b.svblwglq);
  swap(a.gkesoazh, b.gkesoazh);
  swap(a.gdnajler, b.gdnajler);
  swap(a.yzjgzcpl, b.yzjgzcpl);
  swap(a.ucfkmhfi, b.ucfkmhfi);
  swap(a.hcfkimtf, b.hcfkimtf);
  swap(a.__isset, b.__isset);
}

TStruct::TStruct(const TStruct& other0) {
  uztrathh = other0.uztrathh;
  xlcdrebd = other0.xlcdrebd;
  svblwglq = other0.svblwglq;
  gkesoazh = other0.gkesoazh;
  gdnajler = other0.gdnajler;
  yzjgzcpl = other0.yzjgzcpl;
  ucfkmhfi = other0.ucfkmhfi;
  hcfkimtf = other0.hcfkimtf;
  __isset = other0.__isset;
}
TStruct& TStruct::operator=(const TStruct& other1) {
  uztrathh = other1.uztrathh;
  xlcdrebd = other1.xlcdrebd;
  svblwglq = other1.svblwglq;
  gkesoazh = other1.gkesoazh;
  gdnajler = other1.gdnajler;
  yzjgzcpl = other1.yzjgzcpl;
  ucfkmhfi = other1.ucfkmhfi;
  hcfkimtf = other1.hcfkimtf;
  __isset = other1.__isset;
  return *this;
}
void TStruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStruct(";
  out << "uztrathh=" << to_string(uztrathh);
  out << ", " << "xlcdrebd=" << to_string(xlcdrebd);
  out << ", " << "svblwglq=" << to_string(svblwglq);
  out << ", " << "gkesoazh=" << to_string(gkesoazh);
  out << ", " << "gdnajler=" << to_string(gdnajler);
  out << ", " << "yzjgzcpl=" << to_string(yzjgzcpl);
  out << ", " << "ucfkmhfi=" << to_string(ucfkmhfi);
  out << ", " << "hcfkimtf=" << to_string(hcfkimtf);
  out << ")";
}


