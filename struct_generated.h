// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STRUCT_H_
#define FLATBUFFERS_GENERATED_STRUCT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct flatData;
struct flatDataBuilder;

struct flatData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef flatDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UZTRATHH = 4,
    VT_XLCDREBD = 6,
    VT_SVBLWGLQ = 8,
    VT_GKESOAZH = 10,
    VT_GDNAJLER = 12,
    VT_YZJGZCPL = 14,
    VT_UCFKMHFI = 16,
    VT_HCFKIMTF = 18
  };
  const ::flatbuffers::String *uztrathh() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UZTRATHH);
  }
  const ::flatbuffers::String *xlcdrebd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_XLCDREBD);
  }
  const ::flatbuffers::String *svblwglq() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SVBLWGLQ);
  }
  const ::flatbuffers::String *gkesoazh() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GKESOAZH);
  }
  const ::flatbuffers::String *gdnajler() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GDNAJLER);
  }
  const ::flatbuffers::String *yzjgzcpl() const {
    return GetPointer<const ::flatbuffers::String *>(VT_YZJGZCPL);
  }
  const ::flatbuffers::String *ucfkmhfi() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UCFKMHFI);
  }
  const ::flatbuffers::String *hcfkimtf() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HCFKIMTF);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UZTRATHH) &&
           verifier.VerifyString(uztrathh()) &&
           VerifyOffset(verifier, VT_XLCDREBD) &&
           verifier.VerifyString(xlcdrebd()) &&
           VerifyOffset(verifier, VT_SVBLWGLQ) &&
           verifier.VerifyString(svblwglq()) &&
           VerifyOffset(verifier, VT_GKESOAZH) &&
           verifier.VerifyString(gkesoazh()) &&
           VerifyOffset(verifier, VT_GDNAJLER) &&
           verifier.VerifyString(gdnajler()) &&
           VerifyOffset(verifier, VT_YZJGZCPL) &&
           verifier.VerifyString(yzjgzcpl()) &&
           VerifyOffset(verifier, VT_UCFKMHFI) &&
           verifier.VerifyString(ucfkmhfi()) &&
           VerifyOffset(verifier, VT_HCFKIMTF) &&
           verifier.VerifyString(hcfkimtf()) &&
           verifier.EndTable();
  }
};

struct flatDataBuilder {
  typedef flatData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uztrathh(::flatbuffers::Offset<::flatbuffers::String> uztrathh) {
    fbb_.AddOffset(flatData::VT_UZTRATHH, uztrathh);
  }
  void add_xlcdrebd(::flatbuffers::Offset<::flatbuffers::String> xlcdrebd) {
    fbb_.AddOffset(flatData::VT_XLCDREBD, xlcdrebd);
  }
  void add_svblwglq(::flatbuffers::Offset<::flatbuffers::String> svblwglq) {
    fbb_.AddOffset(flatData::VT_SVBLWGLQ, svblwglq);
  }
  void add_gkesoazh(::flatbuffers::Offset<::flatbuffers::String> gkesoazh) {
    fbb_.AddOffset(flatData::VT_GKESOAZH, gkesoazh);
  }
  void add_gdnajler(::flatbuffers::Offset<::flatbuffers::String> gdnajler) {
    fbb_.AddOffset(flatData::VT_GDNAJLER, gdnajler);
  }
  void add_yzjgzcpl(::flatbuffers::Offset<::flatbuffers::String> yzjgzcpl) {
    fbb_.AddOffset(flatData::VT_YZJGZCPL, yzjgzcpl);
  }
  void add_ucfkmhfi(::flatbuffers::Offset<::flatbuffers::String> ucfkmhfi) {
    fbb_.AddOffset(flatData::VT_UCFKMHFI, ucfkmhfi);
  }
  void add_hcfkimtf(::flatbuffers::Offset<::flatbuffers::String> hcfkimtf) {
    fbb_.AddOffset(flatData::VT_HCFKIMTF, hcfkimtf);
  }
  explicit flatDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<flatData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<flatData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<flatData> CreateflatData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> uztrathh = 0,
    ::flatbuffers::Offset<::flatbuffers::String> xlcdrebd = 0,
    ::flatbuffers::Offset<::flatbuffers::String> svblwglq = 0,
    ::flatbuffers::Offset<::flatbuffers::String> gkesoazh = 0,
    ::flatbuffers::Offset<::flatbuffers::String> gdnajler = 0,
    ::flatbuffers::Offset<::flatbuffers::String> yzjgzcpl = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ucfkmhfi = 0,
    ::flatbuffers::Offset<::flatbuffers::String> hcfkimtf = 0) {
  flatDataBuilder builder_(_fbb);
  builder_.add_hcfkimtf(hcfkimtf);
  builder_.add_ucfkmhfi(ucfkmhfi);
  builder_.add_yzjgzcpl(yzjgzcpl);
  builder_.add_gdnajler(gdnajler);
  builder_.add_gkesoazh(gkesoazh);
  builder_.add_svblwglq(svblwglq);
  builder_.add_xlcdrebd(xlcdrebd);
  builder_.add_uztrathh(uztrathh);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<flatData> CreateflatDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *uztrathh = nullptr,
    const char *xlcdrebd = nullptr,
    const char *svblwglq = nullptr,
    const char *gkesoazh = nullptr,
    const char *gdnajler = nullptr,
    const char *yzjgzcpl = nullptr,
    const char *ucfkmhfi = nullptr,
    const char *hcfkimtf = nullptr) {
  auto uztrathh__ = uztrathh ? _fbb.CreateString(uztrathh) : 0;
  auto xlcdrebd__ = xlcdrebd ? _fbb.CreateString(xlcdrebd) : 0;
  auto svblwglq__ = svblwglq ? _fbb.CreateString(svblwglq) : 0;
  auto gkesoazh__ = gkesoazh ? _fbb.CreateString(gkesoazh) : 0;
  auto gdnajler__ = gdnajler ? _fbb.CreateString(gdnajler) : 0;
  auto yzjgzcpl__ = yzjgzcpl ? _fbb.CreateString(yzjgzcpl) : 0;
  auto ucfkmhfi__ = ucfkmhfi ? _fbb.CreateString(ucfkmhfi) : 0;
  auto hcfkimtf__ = hcfkimtf ? _fbb.CreateString(hcfkimtf) : 0;
  return CreateflatData(
      _fbb,
      uztrathh__,
      xlcdrebd__,
      svblwglq__,
      gkesoazh__,
      gdnajler__,
      yzjgzcpl__,
      ucfkmhfi__,
      hcfkimtf__);
}

inline const flatData *GetflatData(const void *buf) {
  return ::flatbuffers::GetRoot<flatData>(buf);
}

inline const flatData *GetSizePrefixedflatData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatData>(buf);
}

inline bool VerifyflatDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatData>(nullptr);
}

inline bool VerifySizePrefixedflatDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatData>(nullptr);
}

inline void FinishflatDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedflatDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatData> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_STRUCT_H_
