// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STRUCT_H_
#define FLATBUFFERS_GENERATED_STRUCT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct flatData;
struct flatDataBuilder;

struct flatData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef flatDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PPHTEMZF = 4,
    VT_GTEREFEV = 6,
    VT_HQIXJBHI = 8,
    VT_YGJAOEMN = 10,
    VT_TULHEQJT = 12,
    VT_WKAOBQIB = 14,
    VT_NMJJNYOM = 16,
    VT_DGFAAIJX = 18
  };
  int32_t pphtemzf() const {
    return GetField<int32_t>(VT_PPHTEMZF, 0);
  }
  int32_t gterefev() const {
    return GetField<int32_t>(VT_GTEREFEV, 0);
  }
  int32_t hqixjbhi() const {
    return GetField<int32_t>(VT_HQIXJBHI, 0);
  }
  int32_t ygjaoemn() const {
    return GetField<int32_t>(VT_YGJAOEMN, 0);
  }
  int32_t tulheqjt() const {
    return GetField<int32_t>(VT_TULHEQJT, 0);
  }
  int32_t wkaobqib() const {
    return GetField<int32_t>(VT_WKAOBQIB, 0);
  }
  int32_t nmjjnyom() const {
    return GetField<int32_t>(VT_NMJJNYOM, 0);
  }
  int32_t dgfaaijx() const {
    return GetField<int32_t>(VT_DGFAAIJX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PPHTEMZF, 4) &&
           VerifyField<int32_t>(verifier, VT_GTEREFEV, 4) &&
           VerifyField<int32_t>(verifier, VT_HQIXJBHI, 4) &&
           VerifyField<int32_t>(verifier, VT_YGJAOEMN, 4) &&
           VerifyField<int32_t>(verifier, VT_TULHEQJT, 4) &&
           VerifyField<int32_t>(verifier, VT_WKAOBQIB, 4) &&
           VerifyField<int32_t>(verifier, VT_NMJJNYOM, 4) &&
           VerifyField<int32_t>(verifier, VT_DGFAAIJX, 4) &&
           verifier.EndTable();
  }
};

struct flatDataBuilder {
  typedef flatData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pphtemzf(int32_t pphtemzf) {
    fbb_.AddElement<int32_t>(flatData::VT_PPHTEMZF, pphtemzf, 0);
  }
  void add_gterefev(int32_t gterefev) {
    fbb_.AddElement<int32_t>(flatData::VT_GTEREFEV, gterefev, 0);
  }
  void add_hqixjbhi(int32_t hqixjbhi) {
    fbb_.AddElement<int32_t>(flatData::VT_HQIXJBHI, hqixjbhi, 0);
  }
  void add_ygjaoemn(int32_t ygjaoemn) {
    fbb_.AddElement<int32_t>(flatData::VT_YGJAOEMN, ygjaoemn, 0);
  }
  void add_tulheqjt(int32_t tulheqjt) {
    fbb_.AddElement<int32_t>(flatData::VT_TULHEQJT, tulheqjt, 0);
  }
  void add_wkaobqib(int32_t wkaobqib) {
    fbb_.AddElement<int32_t>(flatData::VT_WKAOBQIB, wkaobqib, 0);
  }
  void add_nmjjnyom(int32_t nmjjnyom) {
    fbb_.AddElement<int32_t>(flatData::VT_NMJJNYOM, nmjjnyom, 0);
  }
  void add_dgfaaijx(int32_t dgfaaijx) {
    fbb_.AddElement<int32_t>(flatData::VT_DGFAAIJX, dgfaaijx, 0);
  }
  explicit flatDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<flatData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<flatData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<flatData> CreateflatData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pphtemzf = 0,
    int32_t gterefev = 0,
    int32_t hqixjbhi = 0,
    int32_t ygjaoemn = 0,
    int32_t tulheqjt = 0,
    int32_t wkaobqib = 0,
    int32_t nmjjnyom = 0,
    int32_t dgfaaijx = 0) {
  flatDataBuilder builder_(_fbb);
  builder_.add_dgfaaijx(dgfaaijx);
  builder_.add_nmjjnyom(nmjjnyom);
  builder_.add_wkaobqib(wkaobqib);
  builder_.add_tulheqjt(tulheqjt);
  builder_.add_ygjaoemn(ygjaoemn);
  builder_.add_hqixjbhi(hqixjbhi);
  builder_.add_gterefev(gterefev);
  builder_.add_pphtemzf(pphtemzf);
  return builder_.Finish();
}

inline const flatData *GetflatData(const void *buf) {
  return ::flatbuffers::GetRoot<flatData>(buf);
}

inline const flatData *GetSizePrefixedflatData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatData>(buf);
}

inline bool VerifyflatDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatData>(nullptr);
}

inline bool VerifySizePrefixedflatDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatData>(nullptr);
}

inline void FinishflatDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedflatDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatData> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_STRUCT_H_
