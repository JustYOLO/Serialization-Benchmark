// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: testData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_testData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_testData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_testData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_testData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_testData_2eproto;
class testData;
class testDataDefaultTypeInternal;
extern testDataDefaultTypeInternal _testData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::testData* Arena::CreateMaybeMessage<::testData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class testData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testData) */ {
 public:
  inline testData() : testData(nullptr) {};
  virtual ~testData();

  testData(const testData& from);
  testData(testData&& from) noexcept
    : testData() {
    *this = ::std::move(from);
  }

  inline testData& operator=(const testData& from) {
    CopyFrom(from);
    return *this;
  }
  inline testData& operator=(testData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const testData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const testData* internal_default_instance() {
    return reinterpret_cast<const testData*>(
               &_testData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(testData& a, testData& b) {
    a.Swap(&b);
  }
  inline void Swap(testData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(testData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline testData* New() const final {
    return CreateMaybeMessage<testData>(nullptr);
  }

  testData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<testData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const testData& from);
  void MergeFrom(const testData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(testData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testData";
  }
  protected:
  explicit testData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_testData_2eproto);
    return ::descriptor_table_testData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSMiNkXEGFieldNumber = 1,
    kChDAIVjpFieldNumber = 2,
    kYsRgltuWFieldNumber = 3,
    kJGlKcCSYFieldNumber = 4,
    kUOHYtpvKFieldNumber = 5,
    kJfwYuDrRFieldNumber = 6,
    kEJCYRNCtFieldNumber = 7,
    kTGjuQNUmFieldNumber = 8,
  };
  // string sMiNkXEG = 1;
  void clear_sminkxeg();
  const std::string& sminkxeg() const;
  void set_sminkxeg(const std::string& value);
  void set_sminkxeg(std::string&& value);
  void set_sminkxeg(const char* value);
  void set_sminkxeg(const char* value, size_t size);
  std::string* mutable_sminkxeg();
  std::string* release_sminkxeg();
  void set_allocated_sminkxeg(std::string* sminkxeg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sminkxeg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sminkxeg(
      std::string* sminkxeg);
  private:
  const std::string& _internal_sminkxeg() const;
  void _internal_set_sminkxeg(const std::string& value);
  std::string* _internal_mutable_sminkxeg();
  public:

  // string ChDAIVjp = 2;
  void clear_chdaivjp();
  const std::string& chdaivjp() const;
  void set_chdaivjp(const std::string& value);
  void set_chdaivjp(std::string&& value);
  void set_chdaivjp(const char* value);
  void set_chdaivjp(const char* value, size_t size);
  std::string* mutable_chdaivjp();
  std::string* release_chdaivjp();
  void set_allocated_chdaivjp(std::string* chdaivjp);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_chdaivjp();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_chdaivjp(
      std::string* chdaivjp);
  private:
  const std::string& _internal_chdaivjp() const;
  void _internal_set_chdaivjp(const std::string& value);
  std::string* _internal_mutable_chdaivjp();
  public:

  // string YsRgltuW = 3;
  void clear_ysrgltuw();
  const std::string& ysrgltuw() const;
  void set_ysrgltuw(const std::string& value);
  void set_ysrgltuw(std::string&& value);
  void set_ysrgltuw(const char* value);
  void set_ysrgltuw(const char* value, size_t size);
  std::string* mutable_ysrgltuw();
  std::string* release_ysrgltuw();
  void set_allocated_ysrgltuw(std::string* ysrgltuw);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ysrgltuw();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ysrgltuw(
      std::string* ysrgltuw);
  private:
  const std::string& _internal_ysrgltuw() const;
  void _internal_set_ysrgltuw(const std::string& value);
  std::string* _internal_mutable_ysrgltuw();
  public:

  // string jGlKcCSY = 4;
  void clear_jglkccsy();
  const std::string& jglkccsy() const;
  void set_jglkccsy(const std::string& value);
  void set_jglkccsy(std::string&& value);
  void set_jglkccsy(const char* value);
  void set_jglkccsy(const char* value, size_t size);
  std::string* mutable_jglkccsy();
  std::string* release_jglkccsy();
  void set_allocated_jglkccsy(std::string* jglkccsy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_jglkccsy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jglkccsy(
      std::string* jglkccsy);
  private:
  const std::string& _internal_jglkccsy() const;
  void _internal_set_jglkccsy(const std::string& value);
  std::string* _internal_mutable_jglkccsy();
  public:

  // string uOHYtpvK = 5;
  void clear_uohytpvk();
  const std::string& uohytpvk() const;
  void set_uohytpvk(const std::string& value);
  void set_uohytpvk(std::string&& value);
  void set_uohytpvk(const char* value);
  void set_uohytpvk(const char* value, size_t size);
  std::string* mutable_uohytpvk();
  std::string* release_uohytpvk();
  void set_allocated_uohytpvk(std::string* uohytpvk);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uohytpvk();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uohytpvk(
      std::string* uohytpvk);
  private:
  const std::string& _internal_uohytpvk() const;
  void _internal_set_uohytpvk(const std::string& value);
  std::string* _internal_mutable_uohytpvk();
  public:

  // string jfwYuDrR = 6;
  void clear_jfwyudrr();
  const std::string& jfwyudrr() const;
  void set_jfwyudrr(const std::string& value);
  void set_jfwyudrr(std::string&& value);
  void set_jfwyudrr(const char* value);
  void set_jfwyudrr(const char* value, size_t size);
  std::string* mutable_jfwyudrr();
  std::string* release_jfwyudrr();
  void set_allocated_jfwyudrr(std::string* jfwyudrr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_jfwyudrr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jfwyudrr(
      std::string* jfwyudrr);
  private:
  const std::string& _internal_jfwyudrr() const;
  void _internal_set_jfwyudrr(const std::string& value);
  std::string* _internal_mutable_jfwyudrr();
  public:

  // string eJCYRNCt = 7;
  void clear_ejcyrnct();
  const std::string& ejcyrnct() const;
  void set_ejcyrnct(const std::string& value);
  void set_ejcyrnct(std::string&& value);
  void set_ejcyrnct(const char* value);
  void set_ejcyrnct(const char* value, size_t size);
  std::string* mutable_ejcyrnct();
  std::string* release_ejcyrnct();
  void set_allocated_ejcyrnct(std::string* ejcyrnct);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ejcyrnct();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ejcyrnct(
      std::string* ejcyrnct);
  private:
  const std::string& _internal_ejcyrnct() const;
  void _internal_set_ejcyrnct(const std::string& value);
  std::string* _internal_mutable_ejcyrnct();
  public:

  // string tGjuQNUm = 8;
  void clear_tgjuqnum();
  const std::string& tgjuqnum() const;
  void set_tgjuqnum(const std::string& value);
  void set_tgjuqnum(std::string&& value);
  void set_tgjuqnum(const char* value);
  void set_tgjuqnum(const char* value, size_t size);
  std::string* mutable_tgjuqnum();
  std::string* release_tgjuqnum();
  void set_allocated_tgjuqnum(std::string* tgjuqnum);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tgjuqnum();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tgjuqnum(
      std::string* tgjuqnum);
  private:
  const std::string& _internal_tgjuqnum() const;
  void _internal_set_tgjuqnum(const std::string& value);
  std::string* _internal_mutable_tgjuqnum();
  public:

  // @@protoc_insertion_point(class_scope:testData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sminkxeg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chdaivjp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ysrgltuw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jglkccsy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uohytpvk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jfwyudrr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ejcyrnct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tgjuqnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_testData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// testData

// string sMiNkXEG = 1;
inline void testData::clear_sminkxeg() {
  sminkxeg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& testData::sminkxeg() const {
  // @@protoc_insertion_point(field_get:testData.sMiNkXEG)
  return _internal_sminkxeg();
}
inline void testData::set_sminkxeg(const std::string& value) {
  _internal_set_sminkxeg(value);
  // @@protoc_insertion_point(field_set:testData.sMiNkXEG)
}
inline std::string* testData::mutable_sminkxeg() {
  // @@protoc_insertion_point(field_mutable:testData.sMiNkXEG)
  return _internal_mutable_sminkxeg();
}
inline const std::string& testData::_internal_sminkxeg() const {
  return sminkxeg_.Get();
}
inline void testData::_internal_set_sminkxeg(const std::string& value) {
  
  sminkxeg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void testData::set_sminkxeg(std::string&& value) {
  
  sminkxeg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testData.sMiNkXEG)
}
inline void testData::set_sminkxeg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sminkxeg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:testData.sMiNkXEG)
}
inline void testData::set_sminkxeg(const char* value,
    size_t size) {
  
  sminkxeg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testData.sMiNkXEG)
}
inline std::string* testData::_internal_mutable_sminkxeg() {
  
  return sminkxeg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* testData::release_sminkxeg() {
  // @@protoc_insertion_point(field_release:testData.sMiNkXEG)
  return sminkxeg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void testData::set_allocated_sminkxeg(std::string* sminkxeg) {
  if (sminkxeg != nullptr) {
    
  } else {
    
  }
  sminkxeg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sminkxeg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testData.sMiNkXEG)
}
inline std::string* testData::unsafe_arena_release_sminkxeg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:testData.sMiNkXEG)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sminkxeg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void testData::unsafe_arena_set_allocated_sminkxeg(
    std::string* sminkxeg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sminkxeg != nullptr) {
    
  } else {
    
  }
  sminkxeg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sminkxeg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testData.sMiNkXEG)
}

// string ChDAIVjp = 2;
inline void testData::clear_chdaivjp() {
  chdaivjp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& testData::chdaivjp() const {
  // @@protoc_insertion_point(field_get:testData.ChDAIVjp)
  return _internal_chdaivjp();
}
inline void testData::set_chdaivjp(const std::string& value) {
  _internal_set_chdaivjp(value);
  // @@protoc_insertion_point(field_set:testData.ChDAIVjp)
}
inline std::string* testData::mutable_chdaivjp() {
  // @@protoc_insertion_point(field_mutable:testData.ChDAIVjp)
  return _internal_mutable_chdaivjp();
}
inline const std::string& testData::_internal_chdaivjp() const {
  return chdaivjp_.Get();
}
inline void testData::_internal_set_chdaivjp(const std::string& value) {
  
  chdaivjp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void testData::set_chdaivjp(std::string&& value) {
  
  chdaivjp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testData.ChDAIVjp)
}
inline void testData::set_chdaivjp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chdaivjp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:testData.ChDAIVjp)
}
inline void testData::set_chdaivjp(const char* value,
    size_t size) {
  
  chdaivjp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testData.ChDAIVjp)
}
inline std::string* testData::_internal_mutable_chdaivjp() {
  
  return chdaivjp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* testData::release_chdaivjp() {
  // @@protoc_insertion_point(field_release:testData.ChDAIVjp)
  return chdaivjp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void testData::set_allocated_chdaivjp(std::string* chdaivjp) {
  if (chdaivjp != nullptr) {
    
  } else {
    
  }
  chdaivjp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chdaivjp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testData.ChDAIVjp)
}
inline std::string* testData::unsafe_arena_release_chdaivjp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:testData.ChDAIVjp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return chdaivjp_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void testData::unsafe_arena_set_allocated_chdaivjp(
    std::string* chdaivjp) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (chdaivjp != nullptr) {
    
  } else {
    
  }
  chdaivjp_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      chdaivjp, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testData.ChDAIVjp)
}

// string YsRgltuW = 3;
inline void testData::clear_ysrgltuw() {
  ysrgltuw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& testData::ysrgltuw() const {
  // @@protoc_insertion_point(field_get:testData.YsRgltuW)
  return _internal_ysrgltuw();
}
inline void testData::set_ysrgltuw(const std::string& value) {
  _internal_set_ysrgltuw(value);
  // @@protoc_insertion_point(field_set:testData.YsRgltuW)
}
inline std::string* testData::mutable_ysrgltuw() {
  // @@protoc_insertion_point(field_mutable:testData.YsRgltuW)
  return _internal_mutable_ysrgltuw();
}
inline const std::string& testData::_internal_ysrgltuw() const {
  return ysrgltuw_.Get();
}
inline void testData::_internal_set_ysrgltuw(const std::string& value) {
  
  ysrgltuw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void testData::set_ysrgltuw(std::string&& value) {
  
  ysrgltuw_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testData.YsRgltuW)
}
inline void testData::set_ysrgltuw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ysrgltuw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:testData.YsRgltuW)
}
inline void testData::set_ysrgltuw(const char* value,
    size_t size) {
  
  ysrgltuw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testData.YsRgltuW)
}
inline std::string* testData::_internal_mutable_ysrgltuw() {
  
  return ysrgltuw_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* testData::release_ysrgltuw() {
  // @@protoc_insertion_point(field_release:testData.YsRgltuW)
  return ysrgltuw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void testData::set_allocated_ysrgltuw(std::string* ysrgltuw) {
  if (ysrgltuw != nullptr) {
    
  } else {
    
  }
  ysrgltuw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ysrgltuw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testData.YsRgltuW)
}
inline std::string* testData::unsafe_arena_release_ysrgltuw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:testData.YsRgltuW)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ysrgltuw_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void testData::unsafe_arena_set_allocated_ysrgltuw(
    std::string* ysrgltuw) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ysrgltuw != nullptr) {
    
  } else {
    
  }
  ysrgltuw_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ysrgltuw, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testData.YsRgltuW)
}

// string jGlKcCSY = 4;
inline void testData::clear_jglkccsy() {
  jglkccsy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& testData::jglkccsy() const {
  // @@protoc_insertion_point(field_get:testData.jGlKcCSY)
  return _internal_jglkccsy();
}
inline void testData::set_jglkccsy(const std::string& value) {
  _internal_set_jglkccsy(value);
  // @@protoc_insertion_point(field_set:testData.jGlKcCSY)
}
inline std::string* testData::mutable_jglkccsy() {
  // @@protoc_insertion_point(field_mutable:testData.jGlKcCSY)
  return _internal_mutable_jglkccsy();
}
inline const std::string& testData::_internal_jglkccsy() const {
  return jglkccsy_.Get();
}
inline void testData::_internal_set_jglkccsy(const std::string& value) {
  
  jglkccsy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void testData::set_jglkccsy(std::string&& value) {
  
  jglkccsy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testData.jGlKcCSY)
}
inline void testData::set_jglkccsy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jglkccsy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:testData.jGlKcCSY)
}
inline void testData::set_jglkccsy(const char* value,
    size_t size) {
  
  jglkccsy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testData.jGlKcCSY)
}
inline std::string* testData::_internal_mutable_jglkccsy() {
  
  return jglkccsy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* testData::release_jglkccsy() {
  // @@protoc_insertion_point(field_release:testData.jGlKcCSY)
  return jglkccsy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void testData::set_allocated_jglkccsy(std::string* jglkccsy) {
  if (jglkccsy != nullptr) {
    
  } else {
    
  }
  jglkccsy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jglkccsy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testData.jGlKcCSY)
}
inline std::string* testData::unsafe_arena_release_jglkccsy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:testData.jGlKcCSY)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return jglkccsy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void testData::unsafe_arena_set_allocated_jglkccsy(
    std::string* jglkccsy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (jglkccsy != nullptr) {
    
  } else {
    
  }
  jglkccsy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      jglkccsy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testData.jGlKcCSY)
}

// string uOHYtpvK = 5;
inline void testData::clear_uohytpvk() {
  uohytpvk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& testData::uohytpvk() const {
  // @@protoc_insertion_point(field_get:testData.uOHYtpvK)
  return _internal_uohytpvk();
}
inline void testData::set_uohytpvk(const std::string& value) {
  _internal_set_uohytpvk(value);
  // @@protoc_insertion_point(field_set:testData.uOHYtpvK)
}
inline std::string* testData::mutable_uohytpvk() {
  // @@protoc_insertion_point(field_mutable:testData.uOHYtpvK)
  return _internal_mutable_uohytpvk();
}
inline const std::string& testData::_internal_uohytpvk() const {
  return uohytpvk_.Get();
}
inline void testData::_internal_set_uohytpvk(const std::string& value) {
  
  uohytpvk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void testData::set_uohytpvk(std::string&& value) {
  
  uohytpvk_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testData.uOHYtpvK)
}
inline void testData::set_uohytpvk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uohytpvk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:testData.uOHYtpvK)
}
inline void testData::set_uohytpvk(const char* value,
    size_t size) {
  
  uohytpvk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testData.uOHYtpvK)
}
inline std::string* testData::_internal_mutable_uohytpvk() {
  
  return uohytpvk_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* testData::release_uohytpvk() {
  // @@protoc_insertion_point(field_release:testData.uOHYtpvK)
  return uohytpvk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void testData::set_allocated_uohytpvk(std::string* uohytpvk) {
  if (uohytpvk != nullptr) {
    
  } else {
    
  }
  uohytpvk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uohytpvk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testData.uOHYtpvK)
}
inline std::string* testData::unsafe_arena_release_uohytpvk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:testData.uOHYtpvK)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uohytpvk_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void testData::unsafe_arena_set_allocated_uohytpvk(
    std::string* uohytpvk) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uohytpvk != nullptr) {
    
  } else {
    
  }
  uohytpvk_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uohytpvk, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testData.uOHYtpvK)
}

// string jfwYuDrR = 6;
inline void testData::clear_jfwyudrr() {
  jfwyudrr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& testData::jfwyudrr() const {
  // @@protoc_insertion_point(field_get:testData.jfwYuDrR)
  return _internal_jfwyudrr();
}
inline void testData::set_jfwyudrr(const std::string& value) {
  _internal_set_jfwyudrr(value);
  // @@protoc_insertion_point(field_set:testData.jfwYuDrR)
}
inline std::string* testData::mutable_jfwyudrr() {
  // @@protoc_insertion_point(field_mutable:testData.jfwYuDrR)
  return _internal_mutable_jfwyudrr();
}
inline const std::string& testData::_internal_jfwyudrr() const {
  return jfwyudrr_.Get();
}
inline void testData::_internal_set_jfwyudrr(const std::string& value) {
  
  jfwyudrr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void testData::set_jfwyudrr(std::string&& value) {
  
  jfwyudrr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testData.jfwYuDrR)
}
inline void testData::set_jfwyudrr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jfwyudrr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:testData.jfwYuDrR)
}
inline void testData::set_jfwyudrr(const char* value,
    size_t size) {
  
  jfwyudrr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testData.jfwYuDrR)
}
inline std::string* testData::_internal_mutable_jfwyudrr() {
  
  return jfwyudrr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* testData::release_jfwyudrr() {
  // @@protoc_insertion_point(field_release:testData.jfwYuDrR)
  return jfwyudrr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void testData::set_allocated_jfwyudrr(std::string* jfwyudrr) {
  if (jfwyudrr != nullptr) {
    
  } else {
    
  }
  jfwyudrr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jfwyudrr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testData.jfwYuDrR)
}
inline std::string* testData::unsafe_arena_release_jfwyudrr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:testData.jfwYuDrR)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return jfwyudrr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void testData::unsafe_arena_set_allocated_jfwyudrr(
    std::string* jfwyudrr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (jfwyudrr != nullptr) {
    
  } else {
    
  }
  jfwyudrr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      jfwyudrr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testData.jfwYuDrR)
}

// string eJCYRNCt = 7;
inline void testData::clear_ejcyrnct() {
  ejcyrnct_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& testData::ejcyrnct() const {
  // @@protoc_insertion_point(field_get:testData.eJCYRNCt)
  return _internal_ejcyrnct();
}
inline void testData::set_ejcyrnct(const std::string& value) {
  _internal_set_ejcyrnct(value);
  // @@protoc_insertion_point(field_set:testData.eJCYRNCt)
}
inline std::string* testData::mutable_ejcyrnct() {
  // @@protoc_insertion_point(field_mutable:testData.eJCYRNCt)
  return _internal_mutable_ejcyrnct();
}
inline const std::string& testData::_internal_ejcyrnct() const {
  return ejcyrnct_.Get();
}
inline void testData::_internal_set_ejcyrnct(const std::string& value) {
  
  ejcyrnct_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void testData::set_ejcyrnct(std::string&& value) {
  
  ejcyrnct_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testData.eJCYRNCt)
}
inline void testData::set_ejcyrnct(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ejcyrnct_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:testData.eJCYRNCt)
}
inline void testData::set_ejcyrnct(const char* value,
    size_t size) {
  
  ejcyrnct_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testData.eJCYRNCt)
}
inline std::string* testData::_internal_mutable_ejcyrnct() {
  
  return ejcyrnct_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* testData::release_ejcyrnct() {
  // @@protoc_insertion_point(field_release:testData.eJCYRNCt)
  return ejcyrnct_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void testData::set_allocated_ejcyrnct(std::string* ejcyrnct) {
  if (ejcyrnct != nullptr) {
    
  } else {
    
  }
  ejcyrnct_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ejcyrnct,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testData.eJCYRNCt)
}
inline std::string* testData::unsafe_arena_release_ejcyrnct() {
  // @@protoc_insertion_point(field_unsafe_arena_release:testData.eJCYRNCt)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ejcyrnct_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void testData::unsafe_arena_set_allocated_ejcyrnct(
    std::string* ejcyrnct) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ejcyrnct != nullptr) {
    
  } else {
    
  }
  ejcyrnct_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ejcyrnct, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testData.eJCYRNCt)
}

// string tGjuQNUm = 8;
inline void testData::clear_tgjuqnum() {
  tgjuqnum_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& testData::tgjuqnum() const {
  // @@protoc_insertion_point(field_get:testData.tGjuQNUm)
  return _internal_tgjuqnum();
}
inline void testData::set_tgjuqnum(const std::string& value) {
  _internal_set_tgjuqnum(value);
  // @@protoc_insertion_point(field_set:testData.tGjuQNUm)
}
inline std::string* testData::mutable_tgjuqnum() {
  // @@protoc_insertion_point(field_mutable:testData.tGjuQNUm)
  return _internal_mutable_tgjuqnum();
}
inline const std::string& testData::_internal_tgjuqnum() const {
  return tgjuqnum_.Get();
}
inline void testData::_internal_set_tgjuqnum(const std::string& value) {
  
  tgjuqnum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void testData::set_tgjuqnum(std::string&& value) {
  
  tgjuqnum_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:testData.tGjuQNUm)
}
inline void testData::set_tgjuqnum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tgjuqnum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:testData.tGjuQNUm)
}
inline void testData::set_tgjuqnum(const char* value,
    size_t size) {
  
  tgjuqnum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:testData.tGjuQNUm)
}
inline std::string* testData::_internal_mutable_tgjuqnum() {
  
  return tgjuqnum_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* testData::release_tgjuqnum() {
  // @@protoc_insertion_point(field_release:testData.tGjuQNUm)
  return tgjuqnum_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void testData::set_allocated_tgjuqnum(std::string* tgjuqnum) {
  if (tgjuqnum != nullptr) {
    
  } else {
    
  }
  tgjuqnum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tgjuqnum,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:testData.tGjuQNUm)
}
inline std::string* testData::unsafe_arena_release_tgjuqnum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:testData.tGjuQNUm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tgjuqnum_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void testData::unsafe_arena_set_allocated_tgjuqnum(
    std::string* tgjuqnum) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tgjuqnum != nullptr) {
    
  } else {
    
  }
  tgjuqnum_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tgjuqnum, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testData.tGjuQNUm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_testData_2eproto
