/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "struct_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




TStruct::~TStruct() noexcept {
}


void TStruct::__set_itpfypwk(const int32_t val) {
  this->itpfypwk = val;
}

void TStruct::__set_rwmdhsqd(const int32_t val) {
  this->rwmdhsqd = val;
}

void TStruct::__set_trtzcnjk(const int32_t val) {
  this->trtzcnjk = val;
}

void TStruct::__set_zifozeef(const int32_t val) {
  this->zifozeef = val;
}

void TStruct::__set_jrssogei(const int32_t val) {
  this->jrssogei = val;
}

void TStruct::__set_qzagtdun(const int32_t val) {
  this->qzagtdun = val;
}

void TStruct::__set_sgcokhhb(const int32_t val) {
  this->sgcokhhb = val;
}

void TStruct::__set_bwmmqqsh(const int32_t val) {
  this->bwmmqqsh = val;
}
std::ostream& operator<<(std::ostream& out, const TStruct& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->itpfypwk);
          this->__isset.itpfypwk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rwmdhsqd);
          this->__isset.rwmdhsqd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trtzcnjk);
          this->__isset.trtzcnjk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zifozeef);
          this->__isset.zifozeef = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->jrssogei);
          this->__isset.jrssogei = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->qzagtdun);
          this->__isset.qzagtdun = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sgcokhhb);
          this->__isset.sgcokhhb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bwmmqqsh);
          this->__isset.bwmmqqsh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TStruct");

  xfer += oprot->writeFieldBegin("itpfypwk", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->itpfypwk);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rwmdhsqd", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->rwmdhsqd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trtzcnjk", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->trtzcnjk);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zifozeef", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->zifozeef);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jrssogei", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->jrssogei);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qzagtdun", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->qzagtdun);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sgcokhhb", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->sgcokhhb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bwmmqqsh", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->bwmmqqsh);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TStruct &a, TStruct &b) {
  using ::std::swap;
  swap(a.itpfypwk, b.itpfypwk);
  swap(a.rwmdhsqd, b.rwmdhsqd);
  swap(a.trtzcnjk, b.trtzcnjk);
  swap(a.zifozeef, b.zifozeef);
  swap(a.jrssogei, b.jrssogei);
  swap(a.qzagtdun, b.qzagtdun);
  swap(a.sgcokhhb, b.sgcokhhb);
  swap(a.bwmmqqsh, b.bwmmqqsh);
  swap(a.__isset, b.__isset);
}

TStruct::TStruct(const TStruct& other0) noexcept {
  itpfypwk = other0.itpfypwk;
  rwmdhsqd = other0.rwmdhsqd;
  trtzcnjk = other0.trtzcnjk;
  zifozeef = other0.zifozeef;
  jrssogei = other0.jrssogei;
  qzagtdun = other0.qzagtdun;
  sgcokhhb = other0.sgcokhhb;
  bwmmqqsh = other0.bwmmqqsh;
  __isset = other0.__isset;
}
TStruct& TStruct::operator=(const TStruct& other1) noexcept {
  itpfypwk = other1.itpfypwk;
  rwmdhsqd = other1.rwmdhsqd;
  trtzcnjk = other1.trtzcnjk;
  zifozeef = other1.zifozeef;
  jrssogei = other1.jrssogei;
  qzagtdun = other1.qzagtdun;
  sgcokhhb = other1.sgcokhhb;
  bwmmqqsh = other1.bwmmqqsh;
  __isset = other1.__isset;
  return *this;
}
void TStruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStruct(";
  out << "itpfypwk=" << to_string(itpfypwk);
  out << ", " << "rwmdhsqd=" << to_string(rwmdhsqd);
  out << ", " << "trtzcnjk=" << to_string(trtzcnjk);
  out << ", " << "zifozeef=" << to_string(zifozeef);
  out << ", " << "jrssogei=" << to_string(jrssogei);
  out << ", " << "qzagtdun=" << to_string(qzagtdun);
  out << ", " << "sgcokhhb=" << to_string(sgcokhhb);
  out << ", " << "bwmmqqsh=" << to_string(bwmmqqsh);
  out << ")";
}


