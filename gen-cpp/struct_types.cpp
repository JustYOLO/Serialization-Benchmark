/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "struct_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




TStruct::~TStruct() noexcept {
}


void TStruct::__set_pphtemzf(const int32_t val) {
  this->pphtemzf = val;
}

void TStruct::__set_gterefev(const int32_t val) {
  this->gterefev = val;
}

void TStruct::__set_hqixjbhi(const int32_t val) {
  this->hqixjbhi = val;
}

void TStruct::__set_ygjaoemn(const int32_t val) {
  this->ygjaoemn = val;
}

void TStruct::__set_tulheqjt(const int32_t val) {
  this->tulheqjt = val;
}

void TStruct::__set_wkaobqib(const int32_t val) {
  this->wkaobqib = val;
}

void TStruct::__set_nmjjnyom(const int32_t val) {
  this->nmjjnyom = val;
}

void TStruct::__set_dgfaaijx(const int32_t val) {
  this->dgfaaijx = val;
}
std::ostream& operator<<(std::ostream& out, const TStruct& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pphtemzf);
          this->__isset.pphtemzf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gterefev);
          this->__isset.gterefev = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hqixjbhi);
          this->__isset.hqixjbhi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ygjaoemn);
          this->__isset.ygjaoemn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tulheqjt);
          this->__isset.tulheqjt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->wkaobqib);
          this->__isset.wkaobqib = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nmjjnyom);
          this->__isset.nmjjnyom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dgfaaijx);
          this->__isset.dgfaaijx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TStruct");

  xfer += oprot->writeFieldBegin("pphtemzf", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->pphtemzf);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gterefev", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->gterefev);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hqixjbhi", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->hqixjbhi);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ygjaoemn", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->ygjaoemn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tulheqjt", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->tulheqjt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wkaobqib", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->wkaobqib);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nmjjnyom", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->nmjjnyom);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dgfaaijx", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->dgfaaijx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TStruct &a, TStruct &b) {
  using ::std::swap;
  swap(a.pphtemzf, b.pphtemzf);
  swap(a.gterefev, b.gterefev);
  swap(a.hqixjbhi, b.hqixjbhi);
  swap(a.ygjaoemn, b.ygjaoemn);
  swap(a.tulheqjt, b.tulheqjt);
  swap(a.wkaobqib, b.wkaobqib);
  swap(a.nmjjnyom, b.nmjjnyom);
  swap(a.dgfaaijx, b.dgfaaijx);
  swap(a.__isset, b.__isset);
}

TStruct::TStruct(const TStruct& other0) noexcept {
  pphtemzf = other0.pphtemzf;
  gterefev = other0.gterefev;
  hqixjbhi = other0.hqixjbhi;
  ygjaoemn = other0.ygjaoemn;
  tulheqjt = other0.tulheqjt;
  wkaobqib = other0.wkaobqib;
  nmjjnyom = other0.nmjjnyom;
  dgfaaijx = other0.dgfaaijx;
  __isset = other0.__isset;
}
TStruct& TStruct::operator=(const TStruct& other1) noexcept {
  pphtemzf = other1.pphtemzf;
  gterefev = other1.gterefev;
  hqixjbhi = other1.hqixjbhi;
  ygjaoemn = other1.ygjaoemn;
  tulheqjt = other1.tulheqjt;
  wkaobqib = other1.wkaobqib;
  nmjjnyom = other1.nmjjnyom;
  dgfaaijx = other1.dgfaaijx;
  __isset = other1.__isset;
  return *this;
}
void TStruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStruct(";
  out << "pphtemzf=" << to_string(pphtemzf);
  out << ", " << "gterefev=" << to_string(gterefev);
  out << ", " << "hqixjbhi=" << to_string(hqixjbhi);
  out << ", " << "ygjaoemn=" << to_string(ygjaoemn);
  out << ", " << "tulheqjt=" << to_string(tulheqjt);
  out << ", " << "wkaobqib=" << to_string(wkaobqib);
  out << ", " << "nmjjnyom=" << to_string(nmjjnyom);
  out << ", " << "dgfaaijx=" << to_string(dgfaaijx);
  out << ")";
}


