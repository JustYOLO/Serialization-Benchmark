// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtoData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProtoData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtoData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtoData_2eproto;
class ProtoData;
class ProtoDataDefaultTypeInternal;
extern ProtoDataDefaultTypeInternal _ProtoData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoData* Arena::CreateMaybeMessage<::ProtoData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ProtoData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoData) */ {
 public:
  inline ProtoData() : ProtoData(nullptr) {};
  virtual ~ProtoData();

  ProtoData(const ProtoData& from);
  ProtoData(ProtoData&& from) noexcept
    : ProtoData() {
    *this = ::std::move(from);
  }

  inline ProtoData& operator=(const ProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoData& operator=(ProtoData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoData* internal_default_instance() {
    return reinterpret_cast<const ProtoData*>(
               &_ProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoData& a, ProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoData* New() const final {
    return CreateMaybeMessage<ProtoData>(nullptr);
  }

  ProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoData& from);
  void MergeFrom(const ProtoData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoData";
  }
  protected:
  explicit ProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtoData_2eproto);
    return ::descriptor_table_ProtoData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNscpwcmuFieldNumber = 1,
    kNwvrdaekFieldNumber = 2,
    kFuzvztzrFieldNumber = 3,
    kUykpiqcmFieldNumber = 4,
    kYgxdpvnvFieldNumber = 5,
    kMuzxzgjaFieldNumber = 6,
    kSweazingFieldNumber = 7,
    kSutsmvddFieldNumber = 8,
  };
  // string nscpwcmu = 1;
  void clear_nscpwcmu();
  const std::string& nscpwcmu() const;
  void set_nscpwcmu(const std::string& value);
  void set_nscpwcmu(std::string&& value);
  void set_nscpwcmu(const char* value);
  void set_nscpwcmu(const char* value, size_t size);
  std::string* mutable_nscpwcmu();
  std::string* release_nscpwcmu();
  void set_allocated_nscpwcmu(std::string* nscpwcmu);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nscpwcmu();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nscpwcmu(
      std::string* nscpwcmu);
  private:
  const std::string& _internal_nscpwcmu() const;
  void _internal_set_nscpwcmu(const std::string& value);
  std::string* _internal_mutable_nscpwcmu();
  public:

  // string nwvrdaek = 2;
  void clear_nwvrdaek();
  const std::string& nwvrdaek() const;
  void set_nwvrdaek(const std::string& value);
  void set_nwvrdaek(std::string&& value);
  void set_nwvrdaek(const char* value);
  void set_nwvrdaek(const char* value, size_t size);
  std::string* mutable_nwvrdaek();
  std::string* release_nwvrdaek();
  void set_allocated_nwvrdaek(std::string* nwvrdaek);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nwvrdaek();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nwvrdaek(
      std::string* nwvrdaek);
  private:
  const std::string& _internal_nwvrdaek() const;
  void _internal_set_nwvrdaek(const std::string& value);
  std::string* _internal_mutable_nwvrdaek();
  public:

  // string fuzvztzr = 3;
  void clear_fuzvztzr();
  const std::string& fuzvztzr() const;
  void set_fuzvztzr(const std::string& value);
  void set_fuzvztzr(std::string&& value);
  void set_fuzvztzr(const char* value);
  void set_fuzvztzr(const char* value, size_t size);
  std::string* mutable_fuzvztzr();
  std::string* release_fuzvztzr();
  void set_allocated_fuzvztzr(std::string* fuzvztzr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fuzvztzr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fuzvztzr(
      std::string* fuzvztzr);
  private:
  const std::string& _internal_fuzvztzr() const;
  void _internal_set_fuzvztzr(const std::string& value);
  std::string* _internal_mutable_fuzvztzr();
  public:

  // string uykpiqcm = 4;
  void clear_uykpiqcm();
  const std::string& uykpiqcm() const;
  void set_uykpiqcm(const std::string& value);
  void set_uykpiqcm(std::string&& value);
  void set_uykpiqcm(const char* value);
  void set_uykpiqcm(const char* value, size_t size);
  std::string* mutable_uykpiqcm();
  std::string* release_uykpiqcm();
  void set_allocated_uykpiqcm(std::string* uykpiqcm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uykpiqcm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uykpiqcm(
      std::string* uykpiqcm);
  private:
  const std::string& _internal_uykpiqcm() const;
  void _internal_set_uykpiqcm(const std::string& value);
  std::string* _internal_mutable_uykpiqcm();
  public:

  // string ygxdpvnv = 5;
  void clear_ygxdpvnv();
  const std::string& ygxdpvnv() const;
  void set_ygxdpvnv(const std::string& value);
  void set_ygxdpvnv(std::string&& value);
  void set_ygxdpvnv(const char* value);
  void set_ygxdpvnv(const char* value, size_t size);
  std::string* mutable_ygxdpvnv();
  std::string* release_ygxdpvnv();
  void set_allocated_ygxdpvnv(std::string* ygxdpvnv);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ygxdpvnv();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ygxdpvnv(
      std::string* ygxdpvnv);
  private:
  const std::string& _internal_ygxdpvnv() const;
  void _internal_set_ygxdpvnv(const std::string& value);
  std::string* _internal_mutable_ygxdpvnv();
  public:

  // string muzxzgja = 6;
  void clear_muzxzgja();
  const std::string& muzxzgja() const;
  void set_muzxzgja(const std::string& value);
  void set_muzxzgja(std::string&& value);
  void set_muzxzgja(const char* value);
  void set_muzxzgja(const char* value, size_t size);
  std::string* mutable_muzxzgja();
  std::string* release_muzxzgja();
  void set_allocated_muzxzgja(std::string* muzxzgja);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_muzxzgja();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_muzxzgja(
      std::string* muzxzgja);
  private:
  const std::string& _internal_muzxzgja() const;
  void _internal_set_muzxzgja(const std::string& value);
  std::string* _internal_mutable_muzxzgja();
  public:

  // string sweazing = 7;
  void clear_sweazing();
  const std::string& sweazing() const;
  void set_sweazing(const std::string& value);
  void set_sweazing(std::string&& value);
  void set_sweazing(const char* value);
  void set_sweazing(const char* value, size_t size);
  std::string* mutable_sweazing();
  std::string* release_sweazing();
  void set_allocated_sweazing(std::string* sweazing);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sweazing();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sweazing(
      std::string* sweazing);
  private:
  const std::string& _internal_sweazing() const;
  void _internal_set_sweazing(const std::string& value);
  std::string* _internal_mutable_sweazing();
  public:

  // string sutsmvdd = 8;
  void clear_sutsmvdd();
  const std::string& sutsmvdd() const;
  void set_sutsmvdd(const std::string& value);
  void set_sutsmvdd(std::string&& value);
  void set_sutsmvdd(const char* value);
  void set_sutsmvdd(const char* value, size_t size);
  std::string* mutable_sutsmvdd();
  std::string* release_sutsmvdd();
  void set_allocated_sutsmvdd(std::string* sutsmvdd);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sutsmvdd();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sutsmvdd(
      std::string* sutsmvdd);
  private:
  const std::string& _internal_sutsmvdd() const;
  void _internal_set_sutsmvdd(const std::string& value);
  std::string* _internal_mutable_sutsmvdd();
  public:

  // @@protoc_insertion_point(class_scope:ProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nscpwcmu_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nwvrdaek_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fuzvztzr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uykpiqcm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ygxdpvnv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr muzxzgja_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sweazing_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sutsmvdd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtoData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoData

// string nscpwcmu = 1;
inline void ProtoData::clear_nscpwcmu() {
  nscpwcmu_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::nscpwcmu() const {
  // @@protoc_insertion_point(field_get:ProtoData.nscpwcmu)
  return _internal_nscpwcmu();
}
inline void ProtoData::set_nscpwcmu(const std::string& value) {
  _internal_set_nscpwcmu(value);
  // @@protoc_insertion_point(field_set:ProtoData.nscpwcmu)
}
inline std::string* ProtoData::mutable_nscpwcmu() {
  // @@protoc_insertion_point(field_mutable:ProtoData.nscpwcmu)
  return _internal_mutable_nscpwcmu();
}
inline const std::string& ProtoData::_internal_nscpwcmu() const {
  return nscpwcmu_.Get();
}
inline void ProtoData::_internal_set_nscpwcmu(const std::string& value) {
  
  nscpwcmu_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_nscpwcmu(std::string&& value) {
  
  nscpwcmu_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.nscpwcmu)
}
inline void ProtoData::set_nscpwcmu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nscpwcmu_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.nscpwcmu)
}
inline void ProtoData::set_nscpwcmu(const char* value,
    size_t size) {
  
  nscpwcmu_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.nscpwcmu)
}
inline std::string* ProtoData::_internal_mutable_nscpwcmu() {
  
  return nscpwcmu_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_nscpwcmu() {
  // @@protoc_insertion_point(field_release:ProtoData.nscpwcmu)
  return nscpwcmu_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_nscpwcmu(std::string* nscpwcmu) {
  if (nscpwcmu != nullptr) {
    
  } else {
    
  }
  nscpwcmu_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nscpwcmu,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.nscpwcmu)
}
inline std::string* ProtoData::unsafe_arena_release_nscpwcmu() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.nscpwcmu)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nscpwcmu_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_nscpwcmu(
    std::string* nscpwcmu) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nscpwcmu != nullptr) {
    
  } else {
    
  }
  nscpwcmu_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nscpwcmu, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.nscpwcmu)
}

// string nwvrdaek = 2;
inline void ProtoData::clear_nwvrdaek() {
  nwvrdaek_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::nwvrdaek() const {
  // @@protoc_insertion_point(field_get:ProtoData.nwvrdaek)
  return _internal_nwvrdaek();
}
inline void ProtoData::set_nwvrdaek(const std::string& value) {
  _internal_set_nwvrdaek(value);
  // @@protoc_insertion_point(field_set:ProtoData.nwvrdaek)
}
inline std::string* ProtoData::mutable_nwvrdaek() {
  // @@protoc_insertion_point(field_mutable:ProtoData.nwvrdaek)
  return _internal_mutable_nwvrdaek();
}
inline const std::string& ProtoData::_internal_nwvrdaek() const {
  return nwvrdaek_.Get();
}
inline void ProtoData::_internal_set_nwvrdaek(const std::string& value) {
  
  nwvrdaek_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_nwvrdaek(std::string&& value) {
  
  nwvrdaek_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.nwvrdaek)
}
inline void ProtoData::set_nwvrdaek(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nwvrdaek_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.nwvrdaek)
}
inline void ProtoData::set_nwvrdaek(const char* value,
    size_t size) {
  
  nwvrdaek_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.nwvrdaek)
}
inline std::string* ProtoData::_internal_mutable_nwvrdaek() {
  
  return nwvrdaek_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_nwvrdaek() {
  // @@protoc_insertion_point(field_release:ProtoData.nwvrdaek)
  return nwvrdaek_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_nwvrdaek(std::string* nwvrdaek) {
  if (nwvrdaek != nullptr) {
    
  } else {
    
  }
  nwvrdaek_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nwvrdaek,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.nwvrdaek)
}
inline std::string* ProtoData::unsafe_arena_release_nwvrdaek() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.nwvrdaek)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nwvrdaek_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_nwvrdaek(
    std::string* nwvrdaek) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nwvrdaek != nullptr) {
    
  } else {
    
  }
  nwvrdaek_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nwvrdaek, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.nwvrdaek)
}

// string fuzvztzr = 3;
inline void ProtoData::clear_fuzvztzr() {
  fuzvztzr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::fuzvztzr() const {
  // @@protoc_insertion_point(field_get:ProtoData.fuzvztzr)
  return _internal_fuzvztzr();
}
inline void ProtoData::set_fuzvztzr(const std::string& value) {
  _internal_set_fuzvztzr(value);
  // @@protoc_insertion_point(field_set:ProtoData.fuzvztzr)
}
inline std::string* ProtoData::mutable_fuzvztzr() {
  // @@protoc_insertion_point(field_mutable:ProtoData.fuzvztzr)
  return _internal_mutable_fuzvztzr();
}
inline const std::string& ProtoData::_internal_fuzvztzr() const {
  return fuzvztzr_.Get();
}
inline void ProtoData::_internal_set_fuzvztzr(const std::string& value) {
  
  fuzvztzr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_fuzvztzr(std::string&& value) {
  
  fuzvztzr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.fuzvztzr)
}
inline void ProtoData::set_fuzvztzr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fuzvztzr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.fuzvztzr)
}
inline void ProtoData::set_fuzvztzr(const char* value,
    size_t size) {
  
  fuzvztzr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.fuzvztzr)
}
inline std::string* ProtoData::_internal_mutable_fuzvztzr() {
  
  return fuzvztzr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_fuzvztzr() {
  // @@protoc_insertion_point(field_release:ProtoData.fuzvztzr)
  return fuzvztzr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_fuzvztzr(std::string* fuzvztzr) {
  if (fuzvztzr != nullptr) {
    
  } else {
    
  }
  fuzvztzr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fuzvztzr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.fuzvztzr)
}
inline std::string* ProtoData::unsafe_arena_release_fuzvztzr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.fuzvztzr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fuzvztzr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_fuzvztzr(
    std::string* fuzvztzr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fuzvztzr != nullptr) {
    
  } else {
    
  }
  fuzvztzr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fuzvztzr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.fuzvztzr)
}

// string uykpiqcm = 4;
inline void ProtoData::clear_uykpiqcm() {
  uykpiqcm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::uykpiqcm() const {
  // @@protoc_insertion_point(field_get:ProtoData.uykpiqcm)
  return _internal_uykpiqcm();
}
inline void ProtoData::set_uykpiqcm(const std::string& value) {
  _internal_set_uykpiqcm(value);
  // @@protoc_insertion_point(field_set:ProtoData.uykpiqcm)
}
inline std::string* ProtoData::mutable_uykpiqcm() {
  // @@protoc_insertion_point(field_mutable:ProtoData.uykpiqcm)
  return _internal_mutable_uykpiqcm();
}
inline const std::string& ProtoData::_internal_uykpiqcm() const {
  return uykpiqcm_.Get();
}
inline void ProtoData::_internal_set_uykpiqcm(const std::string& value) {
  
  uykpiqcm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_uykpiqcm(std::string&& value) {
  
  uykpiqcm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.uykpiqcm)
}
inline void ProtoData::set_uykpiqcm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uykpiqcm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.uykpiqcm)
}
inline void ProtoData::set_uykpiqcm(const char* value,
    size_t size) {
  
  uykpiqcm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.uykpiqcm)
}
inline std::string* ProtoData::_internal_mutable_uykpiqcm() {
  
  return uykpiqcm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_uykpiqcm() {
  // @@protoc_insertion_point(field_release:ProtoData.uykpiqcm)
  return uykpiqcm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_uykpiqcm(std::string* uykpiqcm) {
  if (uykpiqcm != nullptr) {
    
  } else {
    
  }
  uykpiqcm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uykpiqcm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.uykpiqcm)
}
inline std::string* ProtoData::unsafe_arena_release_uykpiqcm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.uykpiqcm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uykpiqcm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_uykpiqcm(
    std::string* uykpiqcm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uykpiqcm != nullptr) {
    
  } else {
    
  }
  uykpiqcm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uykpiqcm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.uykpiqcm)
}

// string ygxdpvnv = 5;
inline void ProtoData::clear_ygxdpvnv() {
  ygxdpvnv_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::ygxdpvnv() const {
  // @@protoc_insertion_point(field_get:ProtoData.ygxdpvnv)
  return _internal_ygxdpvnv();
}
inline void ProtoData::set_ygxdpvnv(const std::string& value) {
  _internal_set_ygxdpvnv(value);
  // @@protoc_insertion_point(field_set:ProtoData.ygxdpvnv)
}
inline std::string* ProtoData::mutable_ygxdpvnv() {
  // @@protoc_insertion_point(field_mutable:ProtoData.ygxdpvnv)
  return _internal_mutable_ygxdpvnv();
}
inline const std::string& ProtoData::_internal_ygxdpvnv() const {
  return ygxdpvnv_.Get();
}
inline void ProtoData::_internal_set_ygxdpvnv(const std::string& value) {
  
  ygxdpvnv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_ygxdpvnv(std::string&& value) {
  
  ygxdpvnv_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.ygxdpvnv)
}
inline void ProtoData::set_ygxdpvnv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ygxdpvnv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.ygxdpvnv)
}
inline void ProtoData::set_ygxdpvnv(const char* value,
    size_t size) {
  
  ygxdpvnv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.ygxdpvnv)
}
inline std::string* ProtoData::_internal_mutable_ygxdpvnv() {
  
  return ygxdpvnv_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_ygxdpvnv() {
  // @@protoc_insertion_point(field_release:ProtoData.ygxdpvnv)
  return ygxdpvnv_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_ygxdpvnv(std::string* ygxdpvnv) {
  if (ygxdpvnv != nullptr) {
    
  } else {
    
  }
  ygxdpvnv_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ygxdpvnv,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.ygxdpvnv)
}
inline std::string* ProtoData::unsafe_arena_release_ygxdpvnv() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.ygxdpvnv)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ygxdpvnv_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_ygxdpvnv(
    std::string* ygxdpvnv) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ygxdpvnv != nullptr) {
    
  } else {
    
  }
  ygxdpvnv_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ygxdpvnv, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.ygxdpvnv)
}

// string muzxzgja = 6;
inline void ProtoData::clear_muzxzgja() {
  muzxzgja_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::muzxzgja() const {
  // @@protoc_insertion_point(field_get:ProtoData.muzxzgja)
  return _internal_muzxzgja();
}
inline void ProtoData::set_muzxzgja(const std::string& value) {
  _internal_set_muzxzgja(value);
  // @@protoc_insertion_point(field_set:ProtoData.muzxzgja)
}
inline std::string* ProtoData::mutable_muzxzgja() {
  // @@protoc_insertion_point(field_mutable:ProtoData.muzxzgja)
  return _internal_mutable_muzxzgja();
}
inline const std::string& ProtoData::_internal_muzxzgja() const {
  return muzxzgja_.Get();
}
inline void ProtoData::_internal_set_muzxzgja(const std::string& value) {
  
  muzxzgja_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_muzxzgja(std::string&& value) {
  
  muzxzgja_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.muzxzgja)
}
inline void ProtoData::set_muzxzgja(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  muzxzgja_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.muzxzgja)
}
inline void ProtoData::set_muzxzgja(const char* value,
    size_t size) {
  
  muzxzgja_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.muzxzgja)
}
inline std::string* ProtoData::_internal_mutable_muzxzgja() {
  
  return muzxzgja_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_muzxzgja() {
  // @@protoc_insertion_point(field_release:ProtoData.muzxzgja)
  return muzxzgja_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_muzxzgja(std::string* muzxzgja) {
  if (muzxzgja != nullptr) {
    
  } else {
    
  }
  muzxzgja_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), muzxzgja,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.muzxzgja)
}
inline std::string* ProtoData::unsafe_arena_release_muzxzgja() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.muzxzgja)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return muzxzgja_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_muzxzgja(
    std::string* muzxzgja) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (muzxzgja != nullptr) {
    
  } else {
    
  }
  muzxzgja_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      muzxzgja, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.muzxzgja)
}

// string sweazing = 7;
inline void ProtoData::clear_sweazing() {
  sweazing_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::sweazing() const {
  // @@protoc_insertion_point(field_get:ProtoData.sweazing)
  return _internal_sweazing();
}
inline void ProtoData::set_sweazing(const std::string& value) {
  _internal_set_sweazing(value);
  // @@protoc_insertion_point(field_set:ProtoData.sweazing)
}
inline std::string* ProtoData::mutable_sweazing() {
  // @@protoc_insertion_point(field_mutable:ProtoData.sweazing)
  return _internal_mutable_sweazing();
}
inline const std::string& ProtoData::_internal_sweazing() const {
  return sweazing_.Get();
}
inline void ProtoData::_internal_set_sweazing(const std::string& value) {
  
  sweazing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_sweazing(std::string&& value) {
  
  sweazing_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.sweazing)
}
inline void ProtoData::set_sweazing(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sweazing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.sweazing)
}
inline void ProtoData::set_sweazing(const char* value,
    size_t size) {
  
  sweazing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.sweazing)
}
inline std::string* ProtoData::_internal_mutable_sweazing() {
  
  return sweazing_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_sweazing() {
  // @@protoc_insertion_point(field_release:ProtoData.sweazing)
  return sweazing_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_sweazing(std::string* sweazing) {
  if (sweazing != nullptr) {
    
  } else {
    
  }
  sweazing_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sweazing,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.sweazing)
}
inline std::string* ProtoData::unsafe_arena_release_sweazing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.sweazing)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sweazing_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_sweazing(
    std::string* sweazing) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sweazing != nullptr) {
    
  } else {
    
  }
  sweazing_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sweazing, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.sweazing)
}

// string sutsmvdd = 8;
inline void ProtoData::clear_sutsmvdd() {
  sutsmvdd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::sutsmvdd() const {
  // @@protoc_insertion_point(field_get:ProtoData.sutsmvdd)
  return _internal_sutsmvdd();
}
inline void ProtoData::set_sutsmvdd(const std::string& value) {
  _internal_set_sutsmvdd(value);
  // @@protoc_insertion_point(field_set:ProtoData.sutsmvdd)
}
inline std::string* ProtoData::mutable_sutsmvdd() {
  // @@protoc_insertion_point(field_mutable:ProtoData.sutsmvdd)
  return _internal_mutable_sutsmvdd();
}
inline const std::string& ProtoData::_internal_sutsmvdd() const {
  return sutsmvdd_.Get();
}
inline void ProtoData::_internal_set_sutsmvdd(const std::string& value) {
  
  sutsmvdd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_sutsmvdd(std::string&& value) {
  
  sutsmvdd_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.sutsmvdd)
}
inline void ProtoData::set_sutsmvdd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sutsmvdd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.sutsmvdd)
}
inline void ProtoData::set_sutsmvdd(const char* value,
    size_t size) {
  
  sutsmvdd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.sutsmvdd)
}
inline std::string* ProtoData::_internal_mutable_sutsmvdd() {
  
  return sutsmvdd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_sutsmvdd() {
  // @@protoc_insertion_point(field_release:ProtoData.sutsmvdd)
  return sutsmvdd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_sutsmvdd(std::string* sutsmvdd) {
  if (sutsmvdd != nullptr) {
    
  } else {
    
  }
  sutsmvdd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sutsmvdd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.sutsmvdd)
}
inline std::string* ProtoData::unsafe_arena_release_sutsmvdd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.sutsmvdd)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sutsmvdd_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_sutsmvdd(
    std::string* sutsmvdd) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sutsmvdd != nullptr) {
    
  } else {
    
  }
  sutsmvdd_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sutsmvdd, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.sutsmvdd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProtoData_2eproto
