// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STRUCT_H_
#define FLATBUFFERS_GENERATED_STRUCT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct flatData;
struct flatDataBuilder;

struct flatData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef flatDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NSCPWCMU = 4,
    VT_NWVRDAEK = 6,
    VT_FUZVZTZR = 8,
    VT_UYKPIQCM = 10,
    VT_YGXDPVNV = 12,
    VT_MUZXZGJA = 14,
    VT_SWEAZING = 16,
    VT_SUTSMVDD = 18
  };
  const ::flatbuffers::String *nscpwcmu() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NSCPWCMU);
  }
  const ::flatbuffers::String *nwvrdaek() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NWVRDAEK);
  }
  const ::flatbuffers::String *fuzvztzr() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FUZVZTZR);
  }
  const ::flatbuffers::String *uykpiqcm() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UYKPIQCM);
  }
  const ::flatbuffers::String *ygxdpvnv() const {
    return GetPointer<const ::flatbuffers::String *>(VT_YGXDPVNV);
  }
  const ::flatbuffers::String *muzxzgja() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MUZXZGJA);
  }
  const ::flatbuffers::String *sweazing() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SWEAZING);
  }
  const ::flatbuffers::String *sutsmvdd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SUTSMVDD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NSCPWCMU) &&
           verifier.VerifyString(nscpwcmu()) &&
           VerifyOffset(verifier, VT_NWVRDAEK) &&
           verifier.VerifyString(nwvrdaek()) &&
           VerifyOffset(verifier, VT_FUZVZTZR) &&
           verifier.VerifyString(fuzvztzr()) &&
           VerifyOffset(verifier, VT_UYKPIQCM) &&
           verifier.VerifyString(uykpiqcm()) &&
           VerifyOffset(verifier, VT_YGXDPVNV) &&
           verifier.VerifyString(ygxdpvnv()) &&
           VerifyOffset(verifier, VT_MUZXZGJA) &&
           verifier.VerifyString(muzxzgja()) &&
           VerifyOffset(verifier, VT_SWEAZING) &&
           verifier.VerifyString(sweazing()) &&
           VerifyOffset(verifier, VT_SUTSMVDD) &&
           verifier.VerifyString(sutsmvdd()) &&
           verifier.EndTable();
  }
};

struct flatDataBuilder {
  typedef flatData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_nscpwcmu(::flatbuffers::Offset<::flatbuffers::String> nscpwcmu) {
    fbb_.AddOffset(flatData::VT_NSCPWCMU, nscpwcmu);
  }
  void add_nwvrdaek(::flatbuffers::Offset<::flatbuffers::String> nwvrdaek) {
    fbb_.AddOffset(flatData::VT_NWVRDAEK, nwvrdaek);
  }
  void add_fuzvztzr(::flatbuffers::Offset<::flatbuffers::String> fuzvztzr) {
    fbb_.AddOffset(flatData::VT_FUZVZTZR, fuzvztzr);
  }
  void add_uykpiqcm(::flatbuffers::Offset<::flatbuffers::String> uykpiqcm) {
    fbb_.AddOffset(flatData::VT_UYKPIQCM, uykpiqcm);
  }
  void add_ygxdpvnv(::flatbuffers::Offset<::flatbuffers::String> ygxdpvnv) {
    fbb_.AddOffset(flatData::VT_YGXDPVNV, ygxdpvnv);
  }
  void add_muzxzgja(::flatbuffers::Offset<::flatbuffers::String> muzxzgja) {
    fbb_.AddOffset(flatData::VT_MUZXZGJA, muzxzgja);
  }
  void add_sweazing(::flatbuffers::Offset<::flatbuffers::String> sweazing) {
    fbb_.AddOffset(flatData::VT_SWEAZING, sweazing);
  }
  void add_sutsmvdd(::flatbuffers::Offset<::flatbuffers::String> sutsmvdd) {
    fbb_.AddOffset(flatData::VT_SUTSMVDD, sutsmvdd);
  }
  explicit flatDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<flatData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<flatData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<flatData> CreateflatData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> nscpwcmu = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nwvrdaek = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fuzvztzr = 0,
    ::flatbuffers::Offset<::flatbuffers::String> uykpiqcm = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ygxdpvnv = 0,
    ::flatbuffers::Offset<::flatbuffers::String> muzxzgja = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sweazing = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sutsmvdd = 0) {
  flatDataBuilder builder_(_fbb);
  builder_.add_sutsmvdd(sutsmvdd);
  builder_.add_sweazing(sweazing);
  builder_.add_muzxzgja(muzxzgja);
  builder_.add_ygxdpvnv(ygxdpvnv);
  builder_.add_uykpiqcm(uykpiqcm);
  builder_.add_fuzvztzr(fuzvztzr);
  builder_.add_nwvrdaek(nwvrdaek);
  builder_.add_nscpwcmu(nscpwcmu);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<flatData> CreateflatDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *nscpwcmu = nullptr,
    const char *nwvrdaek = nullptr,
    const char *fuzvztzr = nullptr,
    const char *uykpiqcm = nullptr,
    const char *ygxdpvnv = nullptr,
    const char *muzxzgja = nullptr,
    const char *sweazing = nullptr,
    const char *sutsmvdd = nullptr) {
  auto nscpwcmu__ = nscpwcmu ? _fbb.CreateString(nscpwcmu) : 0;
  auto nwvrdaek__ = nwvrdaek ? _fbb.CreateString(nwvrdaek) : 0;
  auto fuzvztzr__ = fuzvztzr ? _fbb.CreateString(fuzvztzr) : 0;
  auto uykpiqcm__ = uykpiqcm ? _fbb.CreateString(uykpiqcm) : 0;
  auto ygxdpvnv__ = ygxdpvnv ? _fbb.CreateString(ygxdpvnv) : 0;
  auto muzxzgja__ = muzxzgja ? _fbb.CreateString(muzxzgja) : 0;
  auto sweazing__ = sweazing ? _fbb.CreateString(sweazing) : 0;
  auto sutsmvdd__ = sutsmvdd ? _fbb.CreateString(sutsmvdd) : 0;
  return CreateflatData(
      _fbb,
      nscpwcmu__,
      nwvrdaek__,
      fuzvztzr__,
      uykpiqcm__,
      ygxdpvnv__,
      muzxzgja__,
      sweazing__,
      sutsmvdd__);
}

inline const flatData *GetflatData(const void *buf) {
  return ::flatbuffers::GetRoot<flatData>(buf);
}

inline const flatData *GetSizePrefixedflatData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatData>(buf);
}

inline bool VerifyflatDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatData>(nullptr);
}

inline bool VerifySizePrefixedflatDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatData>(nullptr);
}

inline void FinishflatDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedflatDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatData> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_STRUCT_H_
