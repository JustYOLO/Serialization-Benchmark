// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtoData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProtoData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProtoData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtoData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtoData_2eproto;
class ProtoData;
class ProtoDataDefaultTypeInternal;
extern ProtoDataDefaultTypeInternal _ProtoData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoData* Arena::CreateMaybeMessage<::ProtoData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ProtoData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoData) */ {
 public:
  inline ProtoData() : ProtoData(nullptr) {};
  virtual ~ProtoData();

  ProtoData(const ProtoData& from);
  ProtoData(ProtoData&& from) noexcept
    : ProtoData() {
    *this = ::std::move(from);
  }

  inline ProtoData& operator=(const ProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoData& operator=(ProtoData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoData* internal_default_instance() {
    return reinterpret_cast<const ProtoData*>(
               &_ProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoData& a, ProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoData* New() const final {
    return CreateMaybeMessage<ProtoData>(nullptr);
  }

  ProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoData& from);
  void MergeFrom(const ProtoData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoData";
  }
  protected:
  explicit ProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtoData_2eproto);
    return ::descriptor_table_ProtoData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUztrathhFieldNumber = 1,
    kXlcdrebdFieldNumber = 2,
    kSvblwglqFieldNumber = 3,
    kGkesoazhFieldNumber = 4,
    kGdnajlerFieldNumber = 5,
    kYzjgzcplFieldNumber = 6,
    kUcfkmhfiFieldNumber = 7,
    kHcfkimtfFieldNumber = 8,
  };
  // string uztrathh = 1;
  void clear_uztrathh();
  const std::string& uztrathh() const;
  void set_uztrathh(const std::string& value);
  void set_uztrathh(std::string&& value);
  void set_uztrathh(const char* value);
  void set_uztrathh(const char* value, size_t size);
  std::string* mutable_uztrathh();
  std::string* release_uztrathh();
  void set_allocated_uztrathh(std::string* uztrathh);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uztrathh();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uztrathh(
      std::string* uztrathh);
  private:
  const std::string& _internal_uztrathh() const;
  void _internal_set_uztrathh(const std::string& value);
  std::string* _internal_mutable_uztrathh();
  public:

  // string xlcdrebd = 2;
  void clear_xlcdrebd();
  const std::string& xlcdrebd() const;
  void set_xlcdrebd(const std::string& value);
  void set_xlcdrebd(std::string&& value);
  void set_xlcdrebd(const char* value);
  void set_xlcdrebd(const char* value, size_t size);
  std::string* mutable_xlcdrebd();
  std::string* release_xlcdrebd();
  void set_allocated_xlcdrebd(std::string* xlcdrebd);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_xlcdrebd();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_xlcdrebd(
      std::string* xlcdrebd);
  private:
  const std::string& _internal_xlcdrebd() const;
  void _internal_set_xlcdrebd(const std::string& value);
  std::string* _internal_mutable_xlcdrebd();
  public:

  // string svblwglq = 3;
  void clear_svblwglq();
  const std::string& svblwglq() const;
  void set_svblwglq(const std::string& value);
  void set_svblwglq(std::string&& value);
  void set_svblwglq(const char* value);
  void set_svblwglq(const char* value, size_t size);
  std::string* mutable_svblwglq();
  std::string* release_svblwglq();
  void set_allocated_svblwglq(std::string* svblwglq);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_svblwglq();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_svblwglq(
      std::string* svblwglq);
  private:
  const std::string& _internal_svblwglq() const;
  void _internal_set_svblwglq(const std::string& value);
  std::string* _internal_mutable_svblwglq();
  public:

  // string gkesoazh = 4;
  void clear_gkesoazh();
  const std::string& gkesoazh() const;
  void set_gkesoazh(const std::string& value);
  void set_gkesoazh(std::string&& value);
  void set_gkesoazh(const char* value);
  void set_gkesoazh(const char* value, size_t size);
  std::string* mutable_gkesoazh();
  std::string* release_gkesoazh();
  void set_allocated_gkesoazh(std::string* gkesoazh);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gkesoazh();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gkesoazh(
      std::string* gkesoazh);
  private:
  const std::string& _internal_gkesoazh() const;
  void _internal_set_gkesoazh(const std::string& value);
  std::string* _internal_mutable_gkesoazh();
  public:

  // string gdnajler = 5;
  void clear_gdnajler();
  const std::string& gdnajler() const;
  void set_gdnajler(const std::string& value);
  void set_gdnajler(std::string&& value);
  void set_gdnajler(const char* value);
  void set_gdnajler(const char* value, size_t size);
  std::string* mutable_gdnajler();
  std::string* release_gdnajler();
  void set_allocated_gdnajler(std::string* gdnajler);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gdnajler();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gdnajler(
      std::string* gdnajler);
  private:
  const std::string& _internal_gdnajler() const;
  void _internal_set_gdnajler(const std::string& value);
  std::string* _internal_mutable_gdnajler();
  public:

  // string yzjgzcpl = 6;
  void clear_yzjgzcpl();
  const std::string& yzjgzcpl() const;
  void set_yzjgzcpl(const std::string& value);
  void set_yzjgzcpl(std::string&& value);
  void set_yzjgzcpl(const char* value);
  void set_yzjgzcpl(const char* value, size_t size);
  std::string* mutable_yzjgzcpl();
  std::string* release_yzjgzcpl();
  void set_allocated_yzjgzcpl(std::string* yzjgzcpl);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_yzjgzcpl();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_yzjgzcpl(
      std::string* yzjgzcpl);
  private:
  const std::string& _internal_yzjgzcpl() const;
  void _internal_set_yzjgzcpl(const std::string& value);
  std::string* _internal_mutable_yzjgzcpl();
  public:

  // string ucfkmhfi = 7;
  void clear_ucfkmhfi();
  const std::string& ucfkmhfi() const;
  void set_ucfkmhfi(const std::string& value);
  void set_ucfkmhfi(std::string&& value);
  void set_ucfkmhfi(const char* value);
  void set_ucfkmhfi(const char* value, size_t size);
  std::string* mutable_ucfkmhfi();
  std::string* release_ucfkmhfi();
  void set_allocated_ucfkmhfi(std::string* ucfkmhfi);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ucfkmhfi();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ucfkmhfi(
      std::string* ucfkmhfi);
  private:
  const std::string& _internal_ucfkmhfi() const;
  void _internal_set_ucfkmhfi(const std::string& value);
  std::string* _internal_mutable_ucfkmhfi();
  public:

  // string hcfkimtf = 8;
  void clear_hcfkimtf();
  const std::string& hcfkimtf() const;
  void set_hcfkimtf(const std::string& value);
  void set_hcfkimtf(std::string&& value);
  void set_hcfkimtf(const char* value);
  void set_hcfkimtf(const char* value, size_t size);
  std::string* mutable_hcfkimtf();
  std::string* release_hcfkimtf();
  void set_allocated_hcfkimtf(std::string* hcfkimtf);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hcfkimtf();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hcfkimtf(
      std::string* hcfkimtf);
  private:
  const std::string& _internal_hcfkimtf() const;
  void _internal_set_hcfkimtf(const std::string& value);
  std::string* _internal_mutable_hcfkimtf();
  public:

  // @@protoc_insertion_point(class_scope:ProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uztrathh_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xlcdrebd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr svblwglq_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gkesoazh_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gdnajler_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr yzjgzcpl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ucfkmhfi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hcfkimtf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtoData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoData

// string uztrathh = 1;
inline void ProtoData::clear_uztrathh() {
  uztrathh_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::uztrathh() const {
  // @@protoc_insertion_point(field_get:ProtoData.uztrathh)
  return _internal_uztrathh();
}
inline void ProtoData::set_uztrathh(const std::string& value) {
  _internal_set_uztrathh(value);
  // @@protoc_insertion_point(field_set:ProtoData.uztrathh)
}
inline std::string* ProtoData::mutable_uztrathh() {
  // @@protoc_insertion_point(field_mutable:ProtoData.uztrathh)
  return _internal_mutable_uztrathh();
}
inline const std::string& ProtoData::_internal_uztrathh() const {
  return uztrathh_.Get();
}
inline void ProtoData::_internal_set_uztrathh(const std::string& value) {
  
  uztrathh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_uztrathh(std::string&& value) {
  
  uztrathh_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.uztrathh)
}
inline void ProtoData::set_uztrathh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uztrathh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.uztrathh)
}
inline void ProtoData::set_uztrathh(const char* value,
    size_t size) {
  
  uztrathh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.uztrathh)
}
inline std::string* ProtoData::_internal_mutable_uztrathh() {
  
  return uztrathh_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_uztrathh() {
  // @@protoc_insertion_point(field_release:ProtoData.uztrathh)
  return uztrathh_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_uztrathh(std::string* uztrathh) {
  if (uztrathh != nullptr) {
    
  } else {
    
  }
  uztrathh_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uztrathh,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.uztrathh)
}
inline std::string* ProtoData::unsafe_arena_release_uztrathh() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.uztrathh)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uztrathh_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_uztrathh(
    std::string* uztrathh) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uztrathh != nullptr) {
    
  } else {
    
  }
  uztrathh_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uztrathh, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.uztrathh)
}

// string xlcdrebd = 2;
inline void ProtoData::clear_xlcdrebd() {
  xlcdrebd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::xlcdrebd() const {
  // @@protoc_insertion_point(field_get:ProtoData.xlcdrebd)
  return _internal_xlcdrebd();
}
inline void ProtoData::set_xlcdrebd(const std::string& value) {
  _internal_set_xlcdrebd(value);
  // @@protoc_insertion_point(field_set:ProtoData.xlcdrebd)
}
inline std::string* ProtoData::mutable_xlcdrebd() {
  // @@protoc_insertion_point(field_mutable:ProtoData.xlcdrebd)
  return _internal_mutable_xlcdrebd();
}
inline const std::string& ProtoData::_internal_xlcdrebd() const {
  return xlcdrebd_.Get();
}
inline void ProtoData::_internal_set_xlcdrebd(const std::string& value) {
  
  xlcdrebd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_xlcdrebd(std::string&& value) {
  
  xlcdrebd_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.xlcdrebd)
}
inline void ProtoData::set_xlcdrebd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xlcdrebd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.xlcdrebd)
}
inline void ProtoData::set_xlcdrebd(const char* value,
    size_t size) {
  
  xlcdrebd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.xlcdrebd)
}
inline std::string* ProtoData::_internal_mutable_xlcdrebd() {
  
  return xlcdrebd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_xlcdrebd() {
  // @@protoc_insertion_point(field_release:ProtoData.xlcdrebd)
  return xlcdrebd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_xlcdrebd(std::string* xlcdrebd) {
  if (xlcdrebd != nullptr) {
    
  } else {
    
  }
  xlcdrebd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xlcdrebd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.xlcdrebd)
}
inline std::string* ProtoData::unsafe_arena_release_xlcdrebd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.xlcdrebd)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return xlcdrebd_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_xlcdrebd(
    std::string* xlcdrebd) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (xlcdrebd != nullptr) {
    
  } else {
    
  }
  xlcdrebd_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      xlcdrebd, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.xlcdrebd)
}

// string svblwglq = 3;
inline void ProtoData::clear_svblwglq() {
  svblwglq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::svblwglq() const {
  // @@protoc_insertion_point(field_get:ProtoData.svblwglq)
  return _internal_svblwglq();
}
inline void ProtoData::set_svblwglq(const std::string& value) {
  _internal_set_svblwglq(value);
  // @@protoc_insertion_point(field_set:ProtoData.svblwglq)
}
inline std::string* ProtoData::mutable_svblwglq() {
  // @@protoc_insertion_point(field_mutable:ProtoData.svblwglq)
  return _internal_mutable_svblwglq();
}
inline const std::string& ProtoData::_internal_svblwglq() const {
  return svblwglq_.Get();
}
inline void ProtoData::_internal_set_svblwglq(const std::string& value) {
  
  svblwglq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_svblwglq(std::string&& value) {
  
  svblwglq_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.svblwglq)
}
inline void ProtoData::set_svblwglq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  svblwglq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.svblwglq)
}
inline void ProtoData::set_svblwglq(const char* value,
    size_t size) {
  
  svblwglq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.svblwglq)
}
inline std::string* ProtoData::_internal_mutable_svblwglq() {
  
  return svblwglq_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_svblwglq() {
  // @@protoc_insertion_point(field_release:ProtoData.svblwglq)
  return svblwglq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_svblwglq(std::string* svblwglq) {
  if (svblwglq != nullptr) {
    
  } else {
    
  }
  svblwglq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), svblwglq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.svblwglq)
}
inline std::string* ProtoData::unsafe_arena_release_svblwglq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.svblwglq)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return svblwglq_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_svblwglq(
    std::string* svblwglq) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (svblwglq != nullptr) {
    
  } else {
    
  }
  svblwglq_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      svblwglq, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.svblwglq)
}

// string gkesoazh = 4;
inline void ProtoData::clear_gkesoazh() {
  gkesoazh_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::gkesoazh() const {
  // @@protoc_insertion_point(field_get:ProtoData.gkesoazh)
  return _internal_gkesoazh();
}
inline void ProtoData::set_gkesoazh(const std::string& value) {
  _internal_set_gkesoazh(value);
  // @@protoc_insertion_point(field_set:ProtoData.gkesoazh)
}
inline std::string* ProtoData::mutable_gkesoazh() {
  // @@protoc_insertion_point(field_mutable:ProtoData.gkesoazh)
  return _internal_mutable_gkesoazh();
}
inline const std::string& ProtoData::_internal_gkesoazh() const {
  return gkesoazh_.Get();
}
inline void ProtoData::_internal_set_gkesoazh(const std::string& value) {
  
  gkesoazh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_gkesoazh(std::string&& value) {
  
  gkesoazh_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.gkesoazh)
}
inline void ProtoData::set_gkesoazh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gkesoazh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.gkesoazh)
}
inline void ProtoData::set_gkesoazh(const char* value,
    size_t size) {
  
  gkesoazh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.gkesoazh)
}
inline std::string* ProtoData::_internal_mutable_gkesoazh() {
  
  return gkesoazh_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_gkesoazh() {
  // @@protoc_insertion_point(field_release:ProtoData.gkesoazh)
  return gkesoazh_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_gkesoazh(std::string* gkesoazh) {
  if (gkesoazh != nullptr) {
    
  } else {
    
  }
  gkesoazh_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gkesoazh,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.gkesoazh)
}
inline std::string* ProtoData::unsafe_arena_release_gkesoazh() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.gkesoazh)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gkesoazh_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_gkesoazh(
    std::string* gkesoazh) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gkesoazh != nullptr) {
    
  } else {
    
  }
  gkesoazh_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gkesoazh, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.gkesoazh)
}

// string gdnajler = 5;
inline void ProtoData::clear_gdnajler() {
  gdnajler_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::gdnajler() const {
  // @@protoc_insertion_point(field_get:ProtoData.gdnajler)
  return _internal_gdnajler();
}
inline void ProtoData::set_gdnajler(const std::string& value) {
  _internal_set_gdnajler(value);
  // @@protoc_insertion_point(field_set:ProtoData.gdnajler)
}
inline std::string* ProtoData::mutable_gdnajler() {
  // @@protoc_insertion_point(field_mutable:ProtoData.gdnajler)
  return _internal_mutable_gdnajler();
}
inline const std::string& ProtoData::_internal_gdnajler() const {
  return gdnajler_.Get();
}
inline void ProtoData::_internal_set_gdnajler(const std::string& value) {
  
  gdnajler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_gdnajler(std::string&& value) {
  
  gdnajler_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.gdnajler)
}
inline void ProtoData::set_gdnajler(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gdnajler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.gdnajler)
}
inline void ProtoData::set_gdnajler(const char* value,
    size_t size) {
  
  gdnajler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.gdnajler)
}
inline std::string* ProtoData::_internal_mutable_gdnajler() {
  
  return gdnajler_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_gdnajler() {
  // @@protoc_insertion_point(field_release:ProtoData.gdnajler)
  return gdnajler_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_gdnajler(std::string* gdnajler) {
  if (gdnajler != nullptr) {
    
  } else {
    
  }
  gdnajler_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gdnajler,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.gdnajler)
}
inline std::string* ProtoData::unsafe_arena_release_gdnajler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.gdnajler)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gdnajler_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_gdnajler(
    std::string* gdnajler) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gdnajler != nullptr) {
    
  } else {
    
  }
  gdnajler_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gdnajler, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.gdnajler)
}

// string yzjgzcpl = 6;
inline void ProtoData::clear_yzjgzcpl() {
  yzjgzcpl_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::yzjgzcpl() const {
  // @@protoc_insertion_point(field_get:ProtoData.yzjgzcpl)
  return _internal_yzjgzcpl();
}
inline void ProtoData::set_yzjgzcpl(const std::string& value) {
  _internal_set_yzjgzcpl(value);
  // @@protoc_insertion_point(field_set:ProtoData.yzjgzcpl)
}
inline std::string* ProtoData::mutable_yzjgzcpl() {
  // @@protoc_insertion_point(field_mutable:ProtoData.yzjgzcpl)
  return _internal_mutable_yzjgzcpl();
}
inline const std::string& ProtoData::_internal_yzjgzcpl() const {
  return yzjgzcpl_.Get();
}
inline void ProtoData::_internal_set_yzjgzcpl(const std::string& value) {
  
  yzjgzcpl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_yzjgzcpl(std::string&& value) {
  
  yzjgzcpl_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.yzjgzcpl)
}
inline void ProtoData::set_yzjgzcpl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  yzjgzcpl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.yzjgzcpl)
}
inline void ProtoData::set_yzjgzcpl(const char* value,
    size_t size) {
  
  yzjgzcpl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.yzjgzcpl)
}
inline std::string* ProtoData::_internal_mutable_yzjgzcpl() {
  
  return yzjgzcpl_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_yzjgzcpl() {
  // @@protoc_insertion_point(field_release:ProtoData.yzjgzcpl)
  return yzjgzcpl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_yzjgzcpl(std::string* yzjgzcpl) {
  if (yzjgzcpl != nullptr) {
    
  } else {
    
  }
  yzjgzcpl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), yzjgzcpl,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.yzjgzcpl)
}
inline std::string* ProtoData::unsafe_arena_release_yzjgzcpl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.yzjgzcpl)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return yzjgzcpl_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_yzjgzcpl(
    std::string* yzjgzcpl) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (yzjgzcpl != nullptr) {
    
  } else {
    
  }
  yzjgzcpl_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      yzjgzcpl, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.yzjgzcpl)
}

// string ucfkmhfi = 7;
inline void ProtoData::clear_ucfkmhfi() {
  ucfkmhfi_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::ucfkmhfi() const {
  // @@protoc_insertion_point(field_get:ProtoData.ucfkmhfi)
  return _internal_ucfkmhfi();
}
inline void ProtoData::set_ucfkmhfi(const std::string& value) {
  _internal_set_ucfkmhfi(value);
  // @@protoc_insertion_point(field_set:ProtoData.ucfkmhfi)
}
inline std::string* ProtoData::mutable_ucfkmhfi() {
  // @@protoc_insertion_point(field_mutable:ProtoData.ucfkmhfi)
  return _internal_mutable_ucfkmhfi();
}
inline const std::string& ProtoData::_internal_ucfkmhfi() const {
  return ucfkmhfi_.Get();
}
inline void ProtoData::_internal_set_ucfkmhfi(const std::string& value) {
  
  ucfkmhfi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_ucfkmhfi(std::string&& value) {
  
  ucfkmhfi_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.ucfkmhfi)
}
inline void ProtoData::set_ucfkmhfi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ucfkmhfi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.ucfkmhfi)
}
inline void ProtoData::set_ucfkmhfi(const char* value,
    size_t size) {
  
  ucfkmhfi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.ucfkmhfi)
}
inline std::string* ProtoData::_internal_mutable_ucfkmhfi() {
  
  return ucfkmhfi_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_ucfkmhfi() {
  // @@protoc_insertion_point(field_release:ProtoData.ucfkmhfi)
  return ucfkmhfi_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_ucfkmhfi(std::string* ucfkmhfi) {
  if (ucfkmhfi != nullptr) {
    
  } else {
    
  }
  ucfkmhfi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ucfkmhfi,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.ucfkmhfi)
}
inline std::string* ProtoData::unsafe_arena_release_ucfkmhfi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.ucfkmhfi)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ucfkmhfi_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_ucfkmhfi(
    std::string* ucfkmhfi) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ucfkmhfi != nullptr) {
    
  } else {
    
  }
  ucfkmhfi_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ucfkmhfi, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.ucfkmhfi)
}

// string hcfkimtf = 8;
inline void ProtoData::clear_hcfkimtf() {
  hcfkimtf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoData::hcfkimtf() const {
  // @@protoc_insertion_point(field_get:ProtoData.hcfkimtf)
  return _internal_hcfkimtf();
}
inline void ProtoData::set_hcfkimtf(const std::string& value) {
  _internal_set_hcfkimtf(value);
  // @@protoc_insertion_point(field_set:ProtoData.hcfkimtf)
}
inline std::string* ProtoData::mutable_hcfkimtf() {
  // @@protoc_insertion_point(field_mutable:ProtoData.hcfkimtf)
  return _internal_mutable_hcfkimtf();
}
inline const std::string& ProtoData::_internal_hcfkimtf() const {
  return hcfkimtf_.Get();
}
inline void ProtoData::_internal_set_hcfkimtf(const std::string& value) {
  
  hcfkimtf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoData::set_hcfkimtf(std::string&& value) {
  
  hcfkimtf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoData.hcfkimtf)
}
inline void ProtoData::set_hcfkimtf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hcfkimtf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoData.hcfkimtf)
}
inline void ProtoData::set_hcfkimtf(const char* value,
    size_t size) {
  
  hcfkimtf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoData.hcfkimtf)
}
inline std::string* ProtoData::_internal_mutable_hcfkimtf() {
  
  return hcfkimtf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoData::release_hcfkimtf() {
  // @@protoc_insertion_point(field_release:ProtoData.hcfkimtf)
  return hcfkimtf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoData::set_allocated_hcfkimtf(std::string* hcfkimtf) {
  if (hcfkimtf != nullptr) {
    
  } else {
    
  }
  hcfkimtf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hcfkimtf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoData.hcfkimtf)
}
inline std::string* ProtoData::unsafe_arena_release_hcfkimtf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoData.hcfkimtf)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hcfkimtf_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoData::unsafe_arena_set_allocated_hcfkimtf(
    std::string* hcfkimtf) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hcfkimtf != nullptr) {
    
  } else {
    
  }
  hcfkimtf_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hcfkimtf, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoData.hcfkimtf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProtoData_2eproto
