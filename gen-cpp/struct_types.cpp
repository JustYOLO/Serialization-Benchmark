/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "struct_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




TStruct::~TStruct() noexcept {
}


void TStruct::__set_nscpwcmu(const std::string& val) {
  this->nscpwcmu = val;
}

void TStruct::__set_nwvrdaek(const std::string& val) {
  this->nwvrdaek = val;
}

void TStruct::__set_fuzvztzr(const std::string& val) {
  this->fuzvztzr = val;
}

void TStruct::__set_uykpiqcm(const std::string& val) {
  this->uykpiqcm = val;
}

void TStruct::__set_ygxdpvnv(const std::string& val) {
  this->ygxdpvnv = val;
}

void TStruct::__set_muzxzgja(const std::string& val) {
  this->muzxzgja = val;
}

void TStruct::__set_sweazing(const std::string& val) {
  this->sweazing = val;
}

void TStruct::__set_sutsmvdd(const std::string& val) {
  this->sutsmvdd = val;
}
std::ostream& operator<<(std::ostream& out, const TStruct& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nscpwcmu);
          this->__isset.nscpwcmu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nwvrdaek);
          this->__isset.nwvrdaek = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fuzvztzr);
          this->__isset.fuzvztzr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uykpiqcm);
          this->__isset.uykpiqcm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ygxdpvnv);
          this->__isset.ygxdpvnv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->muzxzgja);
          this->__isset.muzxzgja = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sweazing);
          this->__isset.sweazing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sutsmvdd);
          this->__isset.sutsmvdd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TStruct");

  xfer += oprot->writeFieldBegin("nscpwcmu", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->nscpwcmu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nwvrdaek", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->nwvrdaek);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fuzvztzr", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->fuzvztzr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uykpiqcm", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->uykpiqcm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ygxdpvnv", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ygxdpvnv);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("muzxzgja", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->muzxzgja);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sweazing", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->sweazing);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sutsmvdd", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->sutsmvdd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TStruct &a, TStruct &b) {
  using ::std::swap;
  swap(a.nscpwcmu, b.nscpwcmu);
  swap(a.nwvrdaek, b.nwvrdaek);
  swap(a.fuzvztzr, b.fuzvztzr);
  swap(a.uykpiqcm, b.uykpiqcm);
  swap(a.ygxdpvnv, b.ygxdpvnv);
  swap(a.muzxzgja, b.muzxzgja);
  swap(a.sweazing, b.sweazing);
  swap(a.sutsmvdd, b.sutsmvdd);
  swap(a.__isset, b.__isset);
}

TStruct::TStruct(const TStruct& other0) {
  nscpwcmu = other0.nscpwcmu;
  nwvrdaek = other0.nwvrdaek;
  fuzvztzr = other0.fuzvztzr;
  uykpiqcm = other0.uykpiqcm;
  ygxdpvnv = other0.ygxdpvnv;
  muzxzgja = other0.muzxzgja;
  sweazing = other0.sweazing;
  sutsmvdd = other0.sutsmvdd;
  __isset = other0.__isset;
}
TStruct& TStruct::operator=(const TStruct& other1) {
  nscpwcmu = other1.nscpwcmu;
  nwvrdaek = other1.nwvrdaek;
  fuzvztzr = other1.fuzvztzr;
  uykpiqcm = other1.uykpiqcm;
  ygxdpvnv = other1.ygxdpvnv;
  muzxzgja = other1.muzxzgja;
  sweazing = other1.sweazing;
  sutsmvdd = other1.sutsmvdd;
  __isset = other1.__isset;
  return *this;
}
void TStruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStruct(";
  out << "nscpwcmu=" << to_string(nscpwcmu);
  out << ", " << "nwvrdaek=" << to_string(nwvrdaek);
  out << ", " << "fuzvztzr=" << to_string(fuzvztzr);
  out << ", " << "uykpiqcm=" << to_string(uykpiqcm);
  out << ", " << "ygxdpvnv=" << to_string(ygxdpvnv);
  out << ", " << "muzxzgja=" << to_string(muzxzgja);
  out << ", " << "sweazing=" << to_string(sweazing);
  out << ", " << "sutsmvdd=" << to_string(sutsmvdd);
  out << ")";
}


